import os 
import logging
import sqlite3
import asyncio
import requests
from datetime import datetime
import pytz
from telegram import (
    Update,
    InputMediaPhoto,
    InputMediaVideo,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    ConversationHandler,
    filters,
    CallbackQueryHandler
)
from flask import Flask

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")

PORT = int(os.environ.get('PORT', 8080))
ADMIN_CHAT_ID = 1838738269
MOSCOW_TZ = pytz.timezone('Europe/Moscow')
MAKE_WEBHOOK_URL = "https://hook.eu2.make.com/2rcn5ksonlssc9dbk5tnvrcm39kgq86m"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(MAIN_MENU, GET_NAME, GET_PHONE, GET_TECH_TYPE, GET_PROBLEM, GET_MEDIA, CONFIRM) = range(7)

# –ü–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
MEDIA_DIR = "user_media"
os.makedirs(MEDIA_DIR, exist_ok=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_data = {}

# –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
TEXTS = {
    'ru': {
        'welcome': "üîß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        'select_language': "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        'enter_name': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        'enter_phone': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        'select_tech': "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:",
        'describe_problem': "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:",
        'add_media': "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ (–º–∞–∫—Å. 10 —Ñ–∞–π–ª–æ–≤):\n‚Ä¢ –§–æ—Ç–æ –¥–æ 20MB\n‚Ä¢ –í–∏–¥–µ–æ –¥–æ 50MB",
        'confirm': "üìã –í–∞—à–∞ –∑–∞—è–≤–∫–∞:\n\nüë§ –ò–º—è: {name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nüõ† –¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏: {tech_type}\n‚ùó –ü—Ä–æ–±–ª–µ–º–∞: {problem}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
        'confirm_buttons': ["‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ", "‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"],
        'success': "‚úÖ –ó–∞—è–≤–∫–∞ #{order_number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ —É–∂–µ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É.\n–ú–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        'error': "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        'back': "‚Ü©Ô∏è –ù–∞–∑–∞–¥",
        'skip': "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        'cancel': "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß–µ–º –µ—â—ë –º–æ–≥—É –ø–æ–º–æ—á—å?"
    },
    'uz': {
        'welcome': "üîß Xizmat markaziga xush kelibsiz!\nHarakatni tanlang:",
        'select_language': "Tilni tanlang:",
        'enter_name': "Iltimos, ismingizni kiriting:",
        'enter_phone': "Iltimos, telefon raqamingizni kiriting yoki quyidagi tugmani bosing:",
        'select_tech': "Texnika turini tanlang:",
        'describe_problem': "Muammoni batafsil bayon qiling:",
        'add_media': "üì∏ Nosozlikning foto/video suratini yuboring (maks. 10 fayl):\n‚Ä¢ Foto 20MB gacha\n‚Ä¢ Video 50MB gacha",
        'confirm': "üìã Arizangiz:\n\nüë§ Ism: {name}\nüìû Telefon: {phone}\nüõ† Texnika turi: {tech_type}\n‚ùó Muammo: {problem}\n\nHammasi to'g'rimi?",
        'confirm_buttons': ["‚úÖ Ha, hammasi to'g'ri", "‚ùå Yo'q, o'zgartirmoqchiman"],
        'success': "‚úÖ #{order_number} raqamli ariza jo'natildi!\n\nArizangiz qabul qilindi va ish boshlandi.\nTez orada usta siz bilan bog'lanadi.",
        'error': "‚ùå Arizangizni qayta ishlashda xatolik yuz berdi. Iltimos, keyinroq urinib ko'ring.",
        'back': "‚Ü©Ô∏è Orqaga",
        'skip': "‚è≠ O'tkazish",
        'cancel': "‚ùå Harakat bekor qilindi. Yana qanday yordam bera olaman?"
    }
}

TECH_TYPES = {
    'ru': [
        "–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞",
        "–î—É—Ö–æ–≤–∫–∞",
        "–≠–ª–µ–∫—Ç—Ä–æ–ø–ª–∏—Ç–∞",
        "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫",
        "–ü–æ—Å—É–¥–æ–º–æ–π–∫–∞",
        "–ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞",
        "–†–æ–±–æ—Ç-–ø—ã–ª–µ—Å–æ—Å"
    ],
    'uz': [
        "Kir yuvish mashinasi",
        "Pech",
        "Elektroplita",
        "Muzlatgich",
        "Idish yuvish mashinasi",
        "Kofe mashinasi",
        "Changyutgich robot"
    ]
}

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('orders.db')
    c = conn.cursor()

    c.execute('''CREATE TABLE IF NOT EXISTS orders
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  order_number TEXT NOT NULL,
                  user_id INTEGER NOT NULL,
                  username TEXT,
                  name TEXT,
                  phone TEXT,
                  tech_type TEXT,
                  problem TEXT,
                  media_files TEXT,
                  language TEXT,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')

    c.execute('''CREATE TABLE IF NOT EXISTS counters
                 (id INTEGER PRIMARY KEY,
                  last_order_number INTEGER,
                  last_reset_date TEXT)''')

    c.execute("SELECT COUNT(*) FROM counters WHERE id = 1")
    if c.fetchone()[0] == 0:
        current_date = datetime.now(MOSCOW_TZ).strftime('%Y-%m-%d')
        c.execute("INSERT INTO counters (id, last_order_number, last_reset_date) VALUES (1, 0, ?)", (current_date,))

    conn.commit()
    conn.close()

def get_next_order_number():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏"""
    conn = sqlite3.connect('orders.db')
    c = conn.cursor()

    try:
        current_date = datetime.now(MOSCOW_TZ).strftime('%Y-%m-%d')
        c.execute("SELECT last_reset_date, last_order_number FROM counters WHERE id = 1")
        result = c.fetchone()

        if not result:
            last_order_number = 0
            c.execute("INSERT INTO counters (id, last_order_number, last_reset_date) VALUES (1, 0, ?)", (current_date,))
        else:
            last_reset_date, last_order_number = result
            if last_reset_date != current_date:
                last_order_number = 0
                c.execute("UPDATE counters SET last_order_number = 0, last_reset_date = ? WHERE id = 1", (current_date,))

        new_number = last_order_number + 1
        c.execute("UPDATE counters SET last_order_number = ? WHERE id = 1", (new_number,))
        conn.commit()

        return f"{datetime.now(MOSCOW_TZ).strftime('%d%m%Y')}-{new_number:04d}"

    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return f"EMG-{datetime.now(MOSCOW_TZ).strftime('%d%m%Y%H%M%S')}"
    finally:
        conn.close()

async def send_to_make_webhook(order_data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ –≤ Make"""
    try:
        make_payload = {
            "chat_id": order_data.get("user_id", 0),
            "username": order_data.get("username", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
            "name": order_data.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
            "phone": order_data.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
            "tech_type": order_data.get("tech_type", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
            "problem": order_data.get("problem", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
            "language": order_data.get("language", "ru"),
            "order_number": order_data.get("order_number", "–ë–µ–∑ –Ω–æ–º–µ—Ä–∞"),
            "media_count": order_data.get("media_count", 0),
            "source": "telegram_bot"
        }

        for key, value in make_payload.items():
            if value is None:
                make_payload[key] = ""
            elif not isinstance(value, (str, int, float)):
                make_payload[key] = str(value)

        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Make: {make_payload}")

        response = requests.post(
            MAKE_WEBHOOK_URL,
            json=make_payload,
            timeout=10
        )

        if response.status_code == 200:
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Make –¥–ª—è –∑–∞—è–≤–∫–∏ {order_data['order_number']}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Make: {response.status_code} - {response.text}")
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Make: {e}")
        return False

def get_keyboard(buttons, language='ru'):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫"""
    return ReplyKeyboardMarkup(
        [[KeyboardButton(button)] for button in buttons],
        resize_keyboard=True
    )

def contact_keyboard(language='ru'):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    text = TEXTS[language]['back']
    return ReplyKeyboardMarkup([
        [KeyboardButton("üì± " + ("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä" if language == 'ru' else "Mening raqamimni yuborish"), request_contact=True)],
        [KeyboardButton(text)]
    ], resize_keyboard=True)

async def start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞, –≤—ã–±–æ—Ä —è–∑—ã–∫–∞"""
    keyboard = [
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data='lang_ru')],
        [InlineKeyboardButton("O ªzbekcha", callback_data='lang_uz')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        with open("media/welcome.jpg", "rb") as photo:
            await update.message.reply_photo(
                photo=photo,
                caption=TEXTS['ru']['select_language'],
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ welcome.jpg: {e}")
        await update.message.reply_text(
            TEXTS['ru']['select_language'],
            reply_markup=reply_markup
        )
    return MAIN_MENU

async def language_choice(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    language = query.data.split('_')[1]
    user_data[user_id] = {'language': language, 'step': 'name'}

    await query.edit_message_text(
        text=TEXTS[language]['enter_name'],
        reply_markup=None
    )
    return GET_NAME

async def get_name(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    language = user_data[user_id].get('language', 'ru')
    user_data[user_id]['name'] = update.message.text
    user_data[user_id]['step'] = 'phone'

    await update.message.reply_text(
        TEXTS[language]['enter_phone'],
        reply_markup=contact_keyboard(language)
    )
    return GET_PHONE

async def get_phone(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    user_id = update.effective_user.id
    language = user_data[user_id].get('language', 'ru')

    if update.message.contact:
        user_data[user_id]['phone'] = update.message.contact.phone_number
    else:
        user_data[user_id]['phone'] = update.message.text

    user_data[user_id]['step'] = 'tech_type'

    buttons = TECH_TYPES[language]
    reply_markup = ReplyKeyboardMarkup(
        [buttons[i:i+2] for i in range(0, len(buttons), 2)],
        resize_keyboard=True
    )

    await update.message.reply_text(
        TEXTS[language]['select_tech'],
        reply_markup=reply_markup
    )
    return GET_TECH_TYPE

async def get_tech_type(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç–µ—Ö–Ω–∏–∫–∏"""
    user_id = update.effective_user.id
    language = user_data[user_id].get('language', 'ru')
    user_data[user_id]['tech_type'] = update.message.text
    user_data[user_id]['step'] = 'problem'

    await update.message.reply_text(
        TEXTS[language]['describe_problem'],
        reply_markup=get_keyboard([TEXTS[language]['back']], language)
    )
    return GET_PROBLEM

async def get_problem(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
    user_id = update.effective_user.id
    language = user_data[user_id].get('language', 'ru')
    user_data[user_id]['problem'] = update.message.text
    user_data[user_id]['step'] = 'media'

    await update.message.reply_text(
        TEXTS[language]['add_media'],
        reply_markup=get_keyboard([TEXTS[language]['skip'], TEXTS[language]['back']], language)
    )
    return GET_MEDIA

async def handle_media(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
    user_id = update.effective_user.id
    language = user_data[user_id].get('language', 'ru')

    if update.message.text == TEXTS[language]['skip']:
        return await confirm_data(update, context)

    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        file = await context.bot.get_file(file_id)
        ext = "jpg"
    elif update.message.video:
        file_id = update.message.video.file_id
        file = await context.bot.get_file(file_id)
        ext = "mp4"
    else:
        return await confirm_data(update, context)

    filename = f"{user_id}_{datetime.now().strftime('%Y%m%d%H%M%S')}.{ext}"
    file_path = os.path.join(MEDIA_DIR, filename)

    try:
        await file.download_to_drive(file_path)
        user_data[user_id].setdefault('media', []).append(filename)
        
        remaining = 10 - len(user_data[user_id]['media'])
        if remaining > 0:
            await update.message.reply_text(
                f"üìå –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë {remaining} —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:",
                reply_markup=get_keyboard([TEXTS[language]['skip'], TEXTS[language]['back']], language)
            )
        else:
            await update.message.reply_text(
                "üìå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤–ª–æ–∂–µ–Ω–∏–π (10 —Ñ–∞–π–ª–æ–≤). –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º:",
                reply_markup=get_keyboard([TEXTS[language]['skip']], language)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª:",
            reply_markup=get_keyboard([TEXTS[language]['skip']], language)
        )

    return GET_MEDIA

async def confirm_data(update: Update, context: CallbackContext) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π"""
    user_id = update.effective_user.id
    language = user_data[user_id].get('language', 'ru')

    confirm_text = TEXTS[language]['confirm'].format(
        name=user_data[user_id].get('name', '-'),
        phone=user_data[user_id].get('phone', '-'),
        tech_type=user_data[user_id].get('tech_type', '-'),
        problem=user_data[user_id].get('problem', '-')
    )

    await update.message.reply_text(
        confirm_text,
        reply_markup=get_keyboard(TEXTS[language]['confirm_buttons'], language)
    )
    return CONFIRM

async def send_to_admin(update: Update, context: CallbackContext) -> int:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    user_id = update.effective_user.id
    if user_id not in user_data:
        language = 'ru'
        await update.message.reply_text(
            TEXTS[language]['error'],
            reply_markup=get_keyboard([TEXTS[language]['back']], language)
        )
        return MAIN_MENU

    try:
        language = user_data[user_id].get('language', 'ru')
        order_number = get_next_order_number()

        admin_text = (
            f"üö® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{order_number}\n"
            f"üë§ –ò–º—è: {user_data[user_id].get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data[user_id].get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üõ† –¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏: {user_data[user_id].get('tech_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚ùó –ü—Ä–æ–±–ª–µ–º–∞: {user_data[user_id].get('problem', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üåê –Ø–∑—ã–∫: {language}\n"
            f"üì∑ –ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤: {len(user_data[user_id].get('media', []))} —à—Ç\n"
            f"üïí –í—Ä–µ–º—è: {datetime.now(MOSCOW_TZ).strftime('%H:%M %d.%m.%Y')}"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('orders.db')
        c = conn.cursor()
        c.execute('''INSERT INTO orders
                    (order_number, user_id, username, name, phone, tech_type, problem, media_files, language)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                (order_number,
                user_id,
                update.effective_user.username,
                user_data[user_id].get('name'),
                user_data[user_id].get('phone'),
                user_data[user_id].get('tech_type'),
                user_data[user_id].get('problem'),
                ",".join(user_data[user_id].get('media', [])),
                language))
        conn.commit()
        conn.close()

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Make
        make_data = {
            "order_number": order_number,
            "user_id": user_id,
            "username": update.effective_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "name": user_data[user_id].get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            "phone": user_data[user_id].get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            "tech_type": user_data[user_id].get('tech_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            "problem": user_data[user_id].get('problem', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            "language": language,
            "media_count": len(user_data[user_id].get('media', [])),
            "source": "telegram_bot"
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Make
        asyncio.create_task(send_to_make_webhook(make_data))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        media_files = user_data[user_id].get('media', [])

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(
                "üì® –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                url=f"https://t.me/{update.effective_user.username}"
                if update.effective_user.username
                else f"tg://user?id={user_id}"
            )]
        ])

        if media_files:
            try:
                media_group = []
                for i, filename in enumerate(media_files[:10]):
                    file_path = os.path.join(MEDIA_DIR, filename)
                    if not os.path.exists(file_path):
                        continue
                    try:
                        if filename.endswith('.jpg'):
                            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ
                            caption = admin_text if i == 0 else ""
                            media_group.append(InputMediaPhoto(
                                media=open(file_path, 'rb'),
                                caption=caption
                            ))
                        elif filename.endswith('.mp4'):
                            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É –≤–∏–¥–µ–æ
                            caption = admin_text if i == 0 else ""
                            media_group.append(InputMediaVideo(
                                media=open(file_path, 'rb'),
                                caption=caption
                            ))
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {filename}: {e}")

                if media_group:
                    await context.bot.send_media_group(
                        chat_id=ADMIN_CHAT_ID,
                        media=media_group,
                        disable_notification=True
                    )
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    await context.bot.send_message(
                        chat_id=ADMIN_CHAT_ID,
                        text="üì® –°–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:",
                        reply_markup=keyboard
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                await context.bot.send_message(
                    chat_id=ADMIN_CHAT_ID,
                    text=admin_text + "\n\n‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è",
                    reply_markup=keyboard
                )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=admin_text,
                reply_markup=keyboard
            )

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            with open("media/goodbye.jpg", 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=TEXTS[language]['success'].format(order_number=order_number),
                    reply_markup=get_keyboard([TEXTS[language]['back']], language)
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await update.message.reply_text(
                TEXTS[language]['success'].format(order_number=order_number),
                reply_markup=get_keyboard([TEXTS[language]['back']], language)
            )

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await update.message.reply_text(
            TEXTS[language]['error'],
            reply_markup=get_keyboard([TEXTS[language]['back']], language)
        )
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if user_id in user_data:
            for filename in user_data[user_id].get('media', []):
                try:
                    os.remove(os.path.join(MEDIA_DIR, filename))
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
            del user_data[user_id]

    return MAIN_MENU

async def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    user_id = update.effective_user.id
    language = user_data.get(user_id, {}).get('language', 'ru')

    if user_id in user_data:
        for filename in user_data[user_id].get('media', []):
            try:
                os.remove(os.path.join(MEDIA_DIR, filename))
            except:
                pass
        del user_data[user_id]

    await update.message.reply_text(
        TEXTS[language]['cancel'],
        reply_markup=get_keyboard([TEXTS[language]['back']], language)
    )
    return MAIN_MENU

async def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        init_db()
        application = Application.builder().token(TOKEN).build()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                MAIN_MENU: [CallbackQueryHandler(language_choice, pattern='^lang_')],
                GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
                GET_PHONE: [MessageHandler(filters.TEXT | filters.CONTACT, get_phone)],
                GET_TECH_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_tech_type)],
                GET_PROBLEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_problem)],
                GET_MEDIA: [
                    MessageHandler(filters.PHOTO | filters.VIDEO, handle_media),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_data),
                ],
                CONFIRM: [
                    MessageHandler(filters.Regex('^(‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ|‚úÖ Ha, hammasi to\'g\'ri)$'), send_to_admin),
                    MessageHandler(filters.Regex('^(‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ|‚ùå Yo\'q, o\'zgartirmoqchiman)$'), start),
                ],
            },
            fallbacks=[CommandHandler('cancel', cancel)],
            allow_reentry=True
        )

        application.add_handler(conv_handler)

        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        await application.initialize()
        await application.start()
        await application.updater.start_polling()
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è
        while True:
            await asyncio.sleep(3600)  # –°–ø–∏–º 1 —á–∞—Å

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check
    app = Flask(__name__)

    @app.route('/')
    def health_check():
        return "‚úÖ Bot is alive and running!"

    @app.route('/health')
    def health():
        return "OK"

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ asyncio event loop
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
    bot_task = loop.create_task(run_bot())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    from threading import Thread
    flask_thread = Thread(target=lambda: app.run(host='0.0.0.0', port=PORT, debug=False, use_reloader=False))
    flask_thread.daemon = True
    flask_thread.start()
    
    logger.info(f"Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º event loop
        loop.run_forever()
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    finally:
        bot_task.cancel()
        loop.close()

if __name__ == '__main__':
    main()
