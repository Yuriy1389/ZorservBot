import os 
import logging
import sqlite3
import asyncio
import requests
from datetime import datetime
import pytz
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    ConversationHandler,
    filters,
    CallbackQueryHandler
)
from flask import Flask, request

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")

PORT = int(os.environ.get('PORT', 8080))
ADMIN_CHAT_ID = 1838738269
MOSCOW_TZ = pytz.timezone('Europe/Moscow')
MAKE_WEBHOOK_URL = "https://hook.eu2.make.com/2rcn5ksonlssc9dbk5tnvrcm39kgq86m"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(MAIN_MENU, GET_NAME, GET_PHONE, GET_TECH_TYPE, GET_PROBLEM, GET_MEDIA, CONFIRM) = range(7)

# –ü–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
MEDIA_DIR = "user_media"
os.makedirs(MEDIA_DIR, exist_ok=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_data = {}
application = None

# –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
TEXTS = {
    'ru': {
        'welcome': "üëã <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –º–µ–Ω—è –∑–æ–≤—É—Ç Zorservbot!</b>\n–Ø –ø–æ–º–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –í–∞–º –∑–∞–∫–∞–∑!\n\n<b>Salom, mening ismim Zorservbot!</b>\nMen sizga buyurtma berishga yordam beraman!\n\nüåê <b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang</b>",
        'enter_name': "üë§ <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è / Ismingizni kiriting:</b>",
        'enter_phone': "üìû <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ / Telefon raqamingizni kiriting:</b>\n\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ / Yoki quyidagi tugmani bosing:",
        'select_tech': "üõ† <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏ / Texnika turini tanlang:</b>",
        'describe_problem': "‚ùó <b>–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ / Muammoni batafsil bayon qiling:</b>",
        'add_media': "üì∏ <b>–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ / Nosozlikning foto/video suratini yuboring</b>\n\n‚Ä¢ –§–æ—Ç–æ –¥–æ 20MB / Foto 20MB gacha\n‚Ä¢ –í–∏–¥–µ–æ –¥–æ 50MB / Video 50MB gacha\n‚Ä¢ –ú–∞–∫—Å. 10 —Ñ–∞–π–ª–æ–≤ / Maks. 10 fayl",
        'confirm': "üìã <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ / Arizangiz:</b>\n\n"
                  "üë§ <b>–ò–º—è / Ism:</b> {name}\n"
                  "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω / Telefon:</b> {phone}\n"
                  "üõ† <b>–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏ / Texnika turi:</b> {tech_type}\n"
                  "‚ùó <b>–ü—Ä–æ–±–ª–µ–º–∞ / Muammo:</b> {problem}\n\n"
                  "<b>–í—Å—ë –≤–µ—Ä–Ω–æ? / Hammasi to'g'rimi?</b>",
        'confirm_buttons': ["‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ", "‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"],
        'success': "‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order_number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! / #{order_number} raqamli ariza jo'natildi!</b>\n\n–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ —É–∂–µ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É. / Arizangiz qabul qilindi va ish boshlandi.\n–ú–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. / Tez orada usta siz bilan bog'lanadi.",
        'error': "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. / Arizangizni qayta ishlashda xatolik yuz berdi. Iltimos, keyinroq urinib ko'ring.",
        'back': "‚Ü©Ô∏è –ù–∞–∑–∞–¥ / Orqaga",
        'skip': "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å / O'tkazish",
        'cancel': "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß–µ–º –µ—â—ë –º–æ–≥—É –ø–æ–º–æ—á—å? / Harakat bekor qilindi. Yana qanday yordam bera olaman?",
        'start_again': "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ / Qayta boshlash"
    },
    'uz': {
        'welcome': "üëã <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –º–µ–Ω—è –∑–æ–≤—É—Ç Zorservbot!</b>\n–Ø –ø–æ–º–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –í–∞–º –∑–∞–∫–∞–∑!\n\n<b>Salom, mening ismim Zorservbot!</b>\nMen sizga buyurtma berishga yordam beraman!\n\nüåê <b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang</b>",
        'enter_name': "üë§ <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è / Ismingizni kiriting:</b>",
        'enter_phone': "üìû <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ / Telefon raqamingizni kiriting:</b>\n\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ / Yoki quyidagi tugmani bosing:",
        'select_tech': "üõ† <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏ / Texnika turini tanlang:</b>",
        'describe_problem': "‚ùó <b>–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ / Muammoni batafsil bayon qiling:</b>",
        'add_media': "üì∏ <b>–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ / Nosozlikning foto/video suratini yuboring</b>\n\n‚Ä¢ –§–æ—Ç–æ –¥–æ 20MB / Foto 20MB gacha\n‚Ä¢ –í–∏–¥–µ–æ –¥–æ 50MB / Video 50MB gacha\n‚Ä¢ –ú–∞–∫—Å. 10 —Ñ–∞–π–ª–æ–≤ / Maks. 10 fayl",
        'confirm': "üìã <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ / Arizangiz:</b>\n\n"
                  "üë§ <b>–ò–º—è / Ism:</b> {name}\n"
                  "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω / Telefon:</b> {phone}\n"
                  "üõ† <b>–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏ / Texnika turi:</b> {tech_type}\n"
                  "‚ùó <b>–ü—Ä–æ–±–ª–µ–º–∞ / Muammo:</b> {problem}\n\n"
                  "<b>–í—Å—ë –≤–µ—Ä–Ω–æ? / Hammasi to'g'rimi?</b>",
        'confirm_buttons': ["‚úÖ Ha, hammasi to'g'ri", "‚ùå Yo'q, o'zgartirmoqchiman"],
        'success': "‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order_number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! / #{order_number} raqamli ariza jo'natildi!</b>\n\n–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ —É–∂–µ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É. / Arizangiz qabul qilindi va ish boshlandi.\n–ú–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. / Tez orada usta siz bilan bog'lanadi.",
        'error': "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. / Arizangizni qayta ishlashda xatolik yuz berdi. Iltimos, keyinroq urinib ko'ring.",
        'back': "‚Ü©Ô∏è –ù–∞–∑–∞–¥ / Orqaga",
        'skip': "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å / O'tkazish",
        'cancel': "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß–µ–º –µ—â—ë –º–æ–≥—É –ø–æ–º–æ—á—å? / Harakat bekor qilindi. Yana qanday yordam bera olaman?",
        'start_again': "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ / Qayta boshlash"
    }
}

TECH_TYPES = {
    'ru': [
        "–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞",
        "–î—É—Ö–æ–≤–∫–∞",
        "–≠–ª–µ–∫—Ç—Ä–æ–ø–ª–∏—Ç–∞",
        "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫",
        "–ü–æ—Å—É–¥–æ–º–æ–π–∫–∞",
        "–ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞",
        "–†–æ–±–æ—Ç-–ø—ã–ª–µ—Å–æ—Å"
    ],
    'uz': [
        "Kir yuvish mashinasi",
        "Pech",
        "Elektroplita",
        "Muzlatgich",
        "Idish yuvish mashinasi",
        "Kofe mashinasi",
        "Changyutgich robot"
    ]
}

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('orders.db')
    c = conn.cursor()

    c.execute('''CREATE TABLE IF NOT EXISTS orders
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  order_number TEXT NOT NULL,
                  user_id INTEGER NOT NULL,
                  username TEXT,
                  name TEXT,
                  phone TEXT,
                  tech_type TEXT,
                  problem TEXT,
                  media_files TEXT,
                  language TEXT,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')

    c.execute('''CREATE TABLE IF NOT EXISTS counters
                 (id INTEGER PRIMARY KEY,
                  last_order_number INTEGER,
                  last_reset_date TEXT)''')

    c.execute("SELECT COUNT(*) FROM counters WHERE id = 1")
    if c.fetchone()[0] == 0:
        current_date = datetime.now(MOSCOW_TZ).strftime('%Y-%m-%d')
        c.execute("INSERT INTO counters (id, last_order_number, last_reset_date) VALUES (1, 0, ?)", (current_date,))

    conn.commit()
    conn.close()

def get_next_order_number():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏"""
    conn = sqlite3.connect('orders.db')
    c = conn.cursor()

    try:
        current_date = datetime.now(MOSCOW_TZ).strftime('%Y-%m-%d')
        c.execute("SELECT last_reset_date, last_order_number FROM counters WHERE id = 1")
        result = c.fetchone()

        if not result:
            last_order_number = 0
            c.execute("INSERT INTO counters (id, last_order_number, last_reset_date) VALUES (1, 0, ?)", (current_date,))
        else:
            last_reset_date, last_order_number = result
            if last_reset_date != current_date:
                last_order_number = 0
                c.execute("UPDATE counters SET last_order_number = 0, last_reset_date = ? WHERE id = 1", (current_date,))

        new_number = last_order_number + 1
        c.execute("UPDATE counters SET last_order_number = ? WHERE id = 1", (new_number,))
        conn.commit()

        return f"{datetime.now(MOSCOW_TZ).strftime('%d%m%Y')}-{new_number:04d}"

    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return f"EMG-{datetime.now(MOSCOW_TZ).strftime('%d%m%Y%H%M%S')}"
    finally:
        conn.close()

async def send_to_make_webhook(order_data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ –≤ Make"""
    try:
        make_payload = {
            "chat_id": order_data.get("user_id", 0),
            "username": order_data.get("username", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
            "name": order_data.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
            "phone": order_data.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
            "tech_type": order_data.get("tech_type", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
            "problem": order_data.get("problem", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
            "language": order_data.get("language", "ru"),
            "order_number": order_data.get("order_number", "–ë–µ–∑ –Ω–æ–º–µ—Ä–∞"),
            "media_count": order_data.get("media_count", 0),
            "source": "telegram_bot"
        }

        for key, value in make_payload.items():
            if value is None:
                make_payload[key] = ""
            elif not isinstance(value, (str, int, float)):
                make_payload[key] = str(value)

        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Make: {make_payload}")

        response = requests.post(
            MAKE_WEBHOOK_URL,
            json=make_payload,
            timeout=10
        )

        if response.status_code == 200:
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Make –¥–ª—è –∑–∞—è–≤–∫–∏ {order_data['order_number']}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Make: {response.status_code} - {response.text}")
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Make: {e}")
        return False

def get_keyboard(buttons, language='ru'):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫"""
    return ReplyKeyboardMarkup(
        [[KeyboardButton(button)] for button in buttons],
        resize_keyboard=True
    )

def contact_keyboard(language='ru'):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    if language == 'ru':
        text = "‚Ü©Ô∏è –ù–∞–∑–∞–¥ / Orqaga"
        button_text = "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä / Mening raqamimni yuborish"
    else:
        text = "‚Ü©Ô∏è Orqaga / –ù–∞–∑–∞–¥"
        button_text = "üì± Mening raqamimni yuborish / –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä"
    
    return ReplyKeyboardMarkup([
        [KeyboardButton(button_text, request_contact=True)],
        [KeyboardButton(text)]
    ], resize_keyboard=True)

def start_keyboard(language='ru'):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ä—Ç"""
    return ReplyKeyboardMarkup([
        [KeyboardButton("/start")]
    ], resize_keyboard=True)

async def start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞, –≤—ã–±–æ—Ä —è–∑—ã–∫–∞"""
    keyboard = [
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", callback_data='lang_ru')],
        [InlineKeyboardButton("–£–∑–±–µ–∫—Å–∫–∏–π —è–∑—ã–∫", callback_data='lang_uz')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        TEXTS['ru']['welcome'],
        reply_markup=reply_markup,
        parse_mode='HTML'
    )
    
    return MAIN_MENU

async def language_choice(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    language = query.data.split('_')[1]
    user_data[user_id] = {'language': language, 'step': 'name'}

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    welcome_text = TEXTS[language]['welcome'].split('üåê')[0]
    await query.edit_message_text(
        text=welcome_text,
        parse_mode='HTML'
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=TEXTS[language]['enter_name'],
        parse_mode='HTML'
    )
    
    return GET_NAME

async def get_name(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    language = user_data[user_id].get('language', 'ru')
    user_data[user_id]['name'] = update.message.text
    user_data[user_id]['step'] = 'phone'

    await update.message.reply_text(
        TEXTS[language]['enter_phone'],
        reply_markup=contact_keyboard(language),
        parse_mode='HTML'
    )
    return GET_PHONE

async def get_phone(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    user_id = update.effective_user.id
    language = user_data[user_id].get('language', 'ru')

    if update.message.contact:
        user_data[user_id]['phone'] = update.message.contact.phone_number
    else:
        user_data[user_id]['phone'] = update.message.text

    user_data[user_id]['step'] = 'tech_type'

    buttons = TECH_TYPES[language]
    reply_markup = ReplyKeyboardMarkup(
        [buttons[i:i+2] for i in range(0, len(buttons), 2)],
        resize_keyboard=True
    )

    await update.message.reply_text(
        TEXTS[language]['select_tech'],
        reply_markup=reply_markup,
        parse_mode='HTML'
    )
    return GET_TECH_TYPE

async def get_tech_type(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç–µ—Ö–Ω–∏–∫–∏"""
    user_id = update.effective_user.id
    language = user_data[user_id].get('language', 'ru')
    user_data[user_id]['tech_type'] = update.message.text
    user_data[user_id]['step'] = 'problem'

    await update.message.reply_text(
        TEXTS[language]['describe_problem'],
        reply_markup=get_keyboard([TEXTS[language]['back']], language),
        parse_mode='HTML'
    )
    return GET_PROBLEM

async def get_problem(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
    user_id = update.effective_user.id
    language = user_data[user_id].get('language', 'ru')
    user_data[user_id]['problem'] = update.message.text
    user_data[user_id]['step'] = 'media'

    await update.message.reply_text(
        TEXTS[language]['add_media'],
        reply_markup=get_keyboard([TEXTS[language]['skip'], TEXTS[language]['back']], language),
        parse_mode='HTML'
    )
    return GET_MEDIA

async def handle_media(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
    user_id = update.effective_user.id
    language = user_data[user_id].get('language', 'ru')

    if update.message.text == TEXTS[language]['skip']:
        return await confirm_data(update, context)

    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        file = await context.bot.get_file(file_id)
        ext = "jpg"
    elif update.message.video:
        file_id = update.message.video.file_id
        file = await context.bot.get_file(file_id)
        ext = "mp4"
    else:
        return await confirm_data(update, context)

    filename = f"{user_id}_{datetime.now().strftime('%Y%m%d%H%M%S')}.{ext}"
    file_path = os.path.join(MEDIA_DIR, filename)

    try:
        await file.download_to_drive(file_path)
        user_data[user_id].setdefault('media', []).append(filename)
        
        remaining = 10 - len(user_data[user_id]['media'])
        if remaining > 0:
            await update.message.reply_text(
                f"üìå –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë {remaining} —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:",
                reply_markup=get_keyboard([TEXTS[language]['skip'], TEXTS[language]['back']], language),
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                "üìå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤–ª–æ–∂–µ–Ω–∏–π (10 —Ñ–∞–π–ª–æ–≤). –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º:",
                reply_markup=get_keyboard([TEXTS[language]['skip']], language),
                parse_mode='HTML'
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª:",
            reply_markup=get_keyboard([TEXTS[language]['skip']], language),
            parse_mode='HTML'
        )

    return GET_MEDIA

async def confirm_data(update: Update, context: CallbackContext) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π"""
    user_id = update.effective_user.id
    language = user_data[user_id].get('language', 'ru')

    confirm_text = TEXTS[language]['confirm'].format(
        name=user_data[user_id].get('name', '-'),
        phone=user_data[user_id].get('phone', '-'),
        tech_type=user_data[user_id].get('tech_type', '-'),
        problem=user_data[user_id].get('problem', '-')
    )

    await update.message.reply_text(
        confirm_text,
        reply_markup=get_keyboard(TEXTS[language]['confirm_buttons'], language),
        parse_mode='HTML'
    )
    return CONFIRM

async def send_to_admin(update: Update, context: CallbackContext) -> int:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    user_id = update.effective_user.id
    if user_id not in user_data:
        language = 'ru'
        await update.message.reply_text(
            TEXTS[language]['error'],
            reply_markup=get_keyboard([TEXTS[language]['back']], language),
            parse_mode='HTML'
        )
        return MAIN_MENU

    try:
        language = user_data[user_id].get('language', 'ru')
        order_number = get_next_order_number()

        admin_text = (
            f"üö® <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{order_number}</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {user_data[user_id].get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_data[user_id].get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üõ† <b>–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏:</b> {user_data[user_id].get('tech_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚ùó <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {user_data[user_id].get('problem', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üåê <b>–Ø–∑—ã–∫:</b> {language}\n"
            f"üì∑ <b>–ú–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤:</b> {len(user_data[user_id].get('media', []))} —à—Ç\n"
            f"üïí <b>–í—Ä–µ–º—è:</b> {datetime.now(MOSCOW_TZ).strftime('%H:%M %d.%m.%Y')}"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('orders.db')
        c = conn.cursor()
        c.execute('''INSERT INTO orders
                    (order_number, user_id, username, name, phone, tech_type, problem, media_files, language)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                (order_number,
                user_id,
                update.effective_user.username,
                user_data[user_id].get('name'),
                user_data[user_id].get('phone'),
                user_data[user_id].get('tech_type'),
                user_data[user_id].get('problem'),
                ",".join(user_data[user_id].get('media', [])),
                language))
        conn.commit()
        conn.close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Make
        make_data = {
            "order_number": order_number,
            "user_id": user_id,
            "username": update.effective_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "name": user_data[user_id].get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            "phone": user_data[user_id].get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            "tech_type": user_data[user_id].get('tech_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            "problem": user_data[user_id].get('problem', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            "language": language,
            "media_count": len(user_data[user_id].get('media', [])),
            "source": "telegram"
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Make
        await send_to_make_webhook(make_data)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=admin_text,
            parse_mode='HTML'
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        success_text = TEXTS[language]['success'].format(order_number=order_number)
        await update.message.reply_text(
            success_text,
            reply_markup=start_keyboard(language),
            parse_mode='HTML'
        )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_data:
            del user_data[user_id]

        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: {e}")
        language = user_data.get(user_id, {}).get('language', 'ru')
        await update.message.reply_text(
            TEXTS[language]['error'],
            reply_markup=get_keyboard([TEXTS[language]['back']], language),
            parse_mode='HTML'
        )
        return MAIN_MENU

async def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    user_id = update.effective_user.id
    language = user_data.get(user_id, {}).get('language', 'ru')
    
    if user_id in user_data:
        del user_data[user_id]
    
    await update.message.reply_text(
        TEXTS[language]['cancel'],
        reply_markup=start_keyboard(language),
        parse_mode='HTML'
    )
    return ConversationHandler.END

async def error_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

@app.route('/')
def index():
    return "Bot is running and ready to receive webhooks!"

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
    if application is None:
        return "Application not initialized", 500
        
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        update_data = request.get_json()
        update = Update.de_json(update_data, application.bot)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        asyncio.run(application.process_update(update))
        
        return "OK", 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return "Error", 500

async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global application
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TOKEN).build()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [CallbackQueryHandler(language_choice, pattern='^lang_')],
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            GET_PHONE: [
                MessageHandler(filters.CONTACT, get_phone),
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)
            ],
            GET_TECH_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_tech_type)],
            GET_PROBLEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_problem)],
            GET_MEDIA: [
                MessageHandler(filters.PHOTO | filters.VIDEO, handle_media),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_media)
            ],
            CONFIRM: [
                MessageHandler(filters.Regex('^(‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ|‚úÖ Ha, hammasi to\'g\'ri)$'), send_to_admin),
                MessageHandler(filters.Regex('^(‚ùå –ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ|‚ùå Yo\'q, o\'zgartirmoqchiman)$'), start)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_message=False,
        allow_reentry=True
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    webhook_url = "https://zorservbot.fly.dev/webhook"
    logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook: {webhook_url}")
    
    try:
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π webhook –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π
        await application.bot.delete_webhook()
        await asyncio.sleep(1)
        await application.bot.set_webhook(webhook_url)
        logger.info("Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        return False

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global application
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    try:
        webhook_success = loop.run_until_complete(main())

        if webhook_success:
            logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook")
            from waitress import serve
            serve(app, host="0.0.0.0", port=PORT)
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook, –∑–∞–ø—É—Å–∫–∞–µ–º polling")
            # ‚ö†Ô∏è run_polling –±–æ–ª—å—à–µ –Ω–µ coroutine
            application.run_polling()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        try:
            application.run_polling()
        except:
            logger.critical("–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω")
